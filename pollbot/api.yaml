swagger: "2.0"
info:
  description: >
    PollBot is an hardworking little robot (microservice) that frees
    its human masters from the toilsome task of polling for the state
    of things during the Firefox release process.
  version: "1.0.0"
  title: "Mozilla Product Delivery PollBot"
  contact:
    url: "irc://irc.mozilla.org:6696/#product-delivery"
  license:
    name: "Mozilla Public License 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/v1"

parameters:
  product:
    name: "product"
    in: "path"
    description: "Mozila Product name (i.e firefox, devedition)"
    required: true
    type: "string"
  version:
    name: "version"
    in: "path"
    description: "version of the given product to check for (i.e 52.0.1)"
    required: true
    type: "string"

tags:
- name: Utilities
- name: Status

paths:
  /:
    get:
      summary: "Display server information and public settings."
      operationId: "getServerInfo"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Return information about the running instance"
          schema:
            type: "object"
      tags:
      - Utilities

  /__heartbeat__:
    get:
      summary: "Is the server working properly? What is failing?"
      operationId: "heartbeat"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Server working properly"
          schema:
            type: "object"
        "503":
          description: "One or more subsystems failing."
          schema:
            type: "object"
      tags:
      - Utilities

  /__lbheartbeat__:
    get:
      summary: "Is the server reachable?"
      operationId: "lbheartbeat"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Server reachable"
          schema:
            type: "object"
      tags:
      - Utilities

  /__version__:
    get:
      summary: "Running instance version information"
      operationId: "version"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Return the running instance version information"
          schema:
            type: "object"
      tags:
      - Utilities

  /contribute.json:
    get:
      summary: "Open source contributing information"
      operationId: "contribute"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Return open source contributing information."
          schema:
            type: "object"
      tags:
      - Utilities

  /__api__:
    get:
      summary: "Open API Specification documentation."
      operationId: "doc"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Return the Open Api Specification."
          schema:
            type: "object"
      tags:
      - Utilities

  /{product}:
    get:
      summary: "Return the list of available product versions."
      operationId: "getProductReleases"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      responses:
        "200":
          description: "Return the list of releases"
          schema:
            type: "object"
            required:
            - "releases"
            properties:
              releases:
                type: "array"
                description: The list of releases
                items:
                  title: Release version
                  type: string
      tags:
      - Status

  /{product}/{version}:
    get:
      summary: "Return version information and its list of checks."
      operationId: "getReleaseInfoAndChecks"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "Return the list of checks and the channel of a release."
          schema:
            type: "object"
            required:
            - "product"
            - "version"
            - "channel"
            - "checks"
            properties:
              product:
                type: "string"
                description: "Product name"
              version:
                type: "string"
                description: "Product version"
              channel:
                type: "string"
                description: "Product release channel"
              checks:
                type: "array"
                description: The list of checks to run
                items:
                  title: Check to be run
                  type: object
                  required:
                  - url
                  - title
                  properties:
                    actionale:
                      type: "boolean"
                      description: "Must the check status equal EXISTS for the release to happen?"
                      default: true
                    url:
                      type: "string"
                      description: "The URL to call to run the check"
                    title:
                      type: "string"
                      description: "The check title"
      tags:
      - Status


  /{product}/ongoing-versions:
    get:
      summary: "Get the product ongoing versions: The last version number for each release channels."
      operationId: "getProductOngoingVersions"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            required:
            - "status"
            properties:
              esr:
                type: "string"
                description: "Current Firefox ESR version"
              release:
                type: "string"
                description: "Current Firefox Release version"
              beta:
                type: "string"
                description: "Current Firefox Beta version"
              nightly:
                type: "string"
                description: "Current Firefox Nightly version"
      tags:
      - Status

  /{product}/{version}/archive:
    get:
      summary: "checks if the product version archive is downloadable"
      operationId: "checkArchiveExistance"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/archive/partner-repacks:
    get:
      summary: "checks if the partner-repacks are downloadable"
      operationId: "checkArchivePartnerRepacks"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/crash-stats/uptake:
    get:
      summary: "checks what is the version uptake with crash-stats info"
      operationId: "checkCrashStatsUptake"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/telemetry/restart-after-update-uptake:
    get:
      summary: "checks the percentage of people having restarted after in browser update"
      operationId: "checkTelemetryRestartAfterUpdateUptake"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/telemetry/migrated-from-previous-version-uptake:
    get:
      summary: "checks the percentage of user using the new version with regards to the previous version number of users"
      operationId: "checkTelemetryMigratedFromPreviousVersionUptake"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/product-details:
    get:
      summary: "checks version exists in product-details.mozilla.org"
      description: >
        checks https://product-details.mozilla.org/1.0/firefox.json for the
        specific version
      operationId: "checkProductDetailsExistance"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/product-details/devedition-beta-versions-matches:
    get:
      summary: "checks that the devedition version matches the beta version"
      description: >
        checks https://product-details.mozilla.org/1.0/firefox_version.json to see
        if the devedition version matches the beta version
      operationId: "checkProductDetailsDeveditionAndBetaVersionsMatches"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/bedrock/security-advisories:
    get:
      summary: "check security advisories have been published on mozilla.org"
      operationId: "checkBedrockSecurityAdvisoryExistance"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/bedrock/download-links:
    get:
      summary: "check download links have been published on mozilla.org"
      operationId: "checkBedrockDownloadLinkExistance"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/bedrock/release-notes:
    get:
      summary: "check release notes have been published on mozilla.org"
      operationId: "checkBedrockReleaseNotesExistance"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/bouncer:
    get:
      summary: "check bouncer redirects to the right version"
      operationId: "checkBouncerLinksVersion"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/balrog-rules:
    get:
      summary: "check balrog rules have been updated for the last release"
      operationId: "checkBalrogRule"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

  /{product}/{version}/buildhub:
    get:
      summary: "check buildhub has referenced the new version"
      operationId: "checkBuildhub"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/product"
      - $ref: "#/parameters/version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/existanceStatus"
      tags:
      - Status

definitions:
  existanceStatus:
    type: "object"
    required:
    - "status"
    properties:
      status:
        type: "string"
        description: "current status of the resource"
        enum:
        - "missing"
        - "incomplete"
        - "exists"
        - "error"
      message:
        type: "string"
        description: "error message"
      link:
        type: "string"
        description: "URL used for the check."
